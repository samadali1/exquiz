{"version":3,"sources":["logo.svg","Components/Result/result.js","Components/Quiz/quiz.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","useStyles","makeStyles","theme","paper","padding","secondaryTail","backgroundColor","palette","secondary","main","Result","props","classes","Timeline","align","TimelineItem","TimelineOppositeContent","TimelineSeparator","TimelineDot","TimelineConnector","TimelineContent","Paper","elevation","className","Typography","variant","component","score","color","correct","wrong","totalQuestions","Quiz","useState","allData","setAllData","selectedQuestion","setSelectedQuestion","currentIndex","setCurrentIndex","answered","setAnswered","rightAnswered","setRightAnswered","stopQuiz","setStopQuiz","totalCorrectAnswered","setTotalCorrectAnswered","totalWrongAnswered","setTotalWrongAnswered","totalAnswered","setTotalAnswered","useEffect","questions","options","decodeURIComponent","correct_answer","i","incorrect_answers","length","push","optionsToDisplay","arr","temp","index","ctr","Math","floor","random","shuffle","sQ","difficulty","rating","Alert","severity","round","Button","fullWidth","onClick","window","location","reload","ProgressBar","striped","now","category","Rating","name","size","value","readOnly","Divider","style","marginBottom","question","map","v","Chip","label","disabled","endIcon","ArrowRightAlt","isNaN","key","App","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2908c59a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Timeline from '@material-ui/lab/Timeline';\r\nimport TimelineItem from '@material-ui/lab/TimelineItem';\r\nimport TimelineSeparator from '@material-ui/lab/TimelineSeparator';\r\nimport TimelineConnector from '@material-ui/lab/TimelineConnector';\r\nimport TimelineContent from '@material-ui/lab/TimelineContent';\r\nimport TimelineOppositeContent from '@material-ui/lab/TimelineOppositeContent';\r\nimport TimelineDot from '@material-ui/lab/TimelineDot';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        padding: '6px 16px',\r\n    },\r\n    secondaryTail: {\r\n        backgroundColor: theme.palette.secondary.main,\r\n    },\r\n}));\r\n\r\nexport default function Result(props) {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Timeline align=\"alternate\">\r\n            <TimelineItem>\r\n                <TimelineOppositeContent>\r\n\r\n                </TimelineOppositeContent>\r\n                <TimelineSeparator>\r\n                    <TimelineDot>\r\n                    </TimelineDot>\r\n                    <TimelineConnector />\r\n                </TimelineSeparator>\r\n                <TimelineContent>\r\n                    <Paper elevation={3} className={classes.paper}>\r\n                        <Typography variant=\"h6\" component=\"h1\">\r\n                            {props.score}%\r\n            </Typography>\r\n                        <Typography>Your Score</Typography>\r\n                    </Paper>\r\n                </TimelineContent>\r\n            </TimelineItem>\r\n            <TimelineItem>\r\n                <TimelineOppositeContent>\r\n\r\n                </TimelineOppositeContent>\r\n                <TimelineSeparator>\r\n                    <TimelineDot color=\"primary\">\r\n                    </TimelineDot>\r\n                    <TimelineConnector />\r\n                </TimelineSeparator>\r\n                <TimelineContent>\r\n                    <Paper elevation={3} className={classes.paper}>\r\n                        <Typography variant=\"h6\" component=\"h1\">\r\n                            {props.correct}\r\n                        </Typography>\r\n                        <Typography>Correct Answers</Typography>\r\n                    </Paper>\r\n                </TimelineContent>\r\n            </TimelineItem>\r\n            <TimelineItem>\r\n                <TimelineSeparator>\r\n                    <TimelineDot color=\"primary\" variant=\"outlined\">\r\n                    </TimelineDot>\r\n                    <TimelineConnector className={classes.secondaryTail} />\r\n                </TimelineSeparator>\r\n                <TimelineContent variant={'secondary'}>\r\n                    <Paper elevation={3} className={classes.paper}>\r\n                        <Typography variant=\"h6\" component=\"h1\">\r\n                            {props.wrong}\r\n                        </Typography>\r\n                        <Typography>Wrong Answers</Typography>\r\n                    </Paper>\r\n                </TimelineContent>\r\n            </TimelineItem>\r\n            <TimelineItem>\r\n                <TimelineSeparator>\r\n                    <TimelineDot color=\"secondary\">\r\n                    </TimelineDot>\r\n                </TimelineSeparator>\r\n                <TimelineContent>\r\n                    <Paper elevation={3} className={classes.paper}>\r\n                        <Typography variant=\"h6\" component=\"h1\">\r\n                            {props.totalQuestions}\r\n                        </Typography>\r\n                        <Typography>Total Questions</Typography>\r\n                    </Paper>\r\n                </TimelineContent>\r\n            </TimelineItem>\r\n        </Timeline>\r\n    );\r\n}","import React, { useState, useEffect, useMemo } from 'react'\r\nimport questions from '../../Data/questions.json'\r\nimport Paper from '@material-ui/core/Paper';\r\nimport { ProgressBar } from 'react-bootstrap'\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Rating from '@material-ui/lab/Rating';\r\nimport Chip from '@material-ui/core/Chip';\r\nimport Button from '@material-ui/core/Button';\r\nimport { ArrowRightAlt } from '@material-ui/icons';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport Result from '../Result/result'\r\nimport Divider from '@material-ui/core/Divider';\r\n\r\nconst Quiz = () => {\r\n    const [allData, setAllData] = useState([])\r\n    const [selectedQuestion, setSelectedQuestion] = useState(null)\r\n    const [currentIndex, setCurrentIndex] = useState(0)\r\n    const [answered, setAnswered] = useState(false)\r\n    const [rightAnswered, setRightAnswered] = useState(false)\r\n    const [stopQuiz, setStopQuiz] = useState(false)\r\n    const [totalCorrectAnswered, setTotalCorrectAnswered] = useState(0)\r\n    const [totalWrongAnswered, setTotalWrongAnswered] = useState(0)\r\n    const [totalAnswered, setTotalAnswered] = useState(0)\r\n\r\n    useEffect(() => {\r\n        setAllData(questions)\r\n    \r\n        if (!stopQuiz) {\r\n            const options = [decodeURIComponent(questions[currentIndex].correct_answer)]\r\n\r\n            for (var i = 0; i < questions[currentIndex].incorrect_answers.length; i++) {\r\n                options.push(decodeURIComponent(questions[currentIndex].incorrect_answers[i]))\r\n            }\r\n            function shuffle(arr) {\r\n                var ctr = arr.length, temp, index;\r\n                while (ctr > 0) {\r\n                    index = Math.floor(Math.random() * ctr);\r\n                    ctr--;\r\n                    temp = arr[ctr];\r\n                    arr[ctr] = arr[index];\r\n                    arr[index] = temp;\r\n                }\r\n                return arr;\r\n            }\r\n\r\n            const optionsToDisplay = shuffle(options);\r\n            const sQ = { ...questions[currentIndex] }\r\n            sQ.options = optionsToDisplay\r\n            if (questions[currentIndex].difficulty === 'hard') {\r\n                sQ.rating = 3\r\n            }\r\n            else if (questions[currentIndex].difficulty === 'medium') {\r\n                sQ.rating = 2\r\n            }\r\n            else {\r\n                sQ.rating = 1\r\n            }\r\n\r\n            setSelectedQuestion(sQ)\r\n        }\r\n\r\n    }, [currentIndex])\r\n\r\n    function handleOptionClick(value) {\r\n        if (!answered) {\r\n\r\n            setTotalAnswered(totalAnswered + 1)\r\n            setAnswered(true)\r\n            if (value === decodeURIComponent(selectedQuestion.correct_answer)) {\r\n                setRightAnswered(true)\r\n                setTotalCorrectAnswered(totalCorrectAnswered + 1)\r\n            }\r\n            else {\r\n                setRightAnswered(false)\r\n                setTotalWrongAnswered(totalWrongAnswered + 1)\r\n\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    function handleNext() {\r\n        \r\n        if ((currentIndex + 1) >= allData.length) {\r\n            setStopQuiz(true)\r\n        }\r\n        else {\r\n            setAnswered(false)\r\n            setRightAnswered(null)\r\n            setCurrentIndex(currentIndex + 1)\r\n        }\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={'container'}>\r\n            {stopQuiz ? <>\r\n                <Paper elevation={3} className={'quizArea'}>\r\n                    <Alert severity=\"info\">It's Result Time</Alert>\r\n                    <Result score={Math.round(totalCorrectAnswered / totalAnswered * 100)} totalQuestions={allData.length} correct={totalCorrectAnswered} wrong={totalWrongAnswered} />\r\n                    <Button variant=\"contained\" fullWidth color=\"secondary\" className={'startAgainBtn'} onClick={()=>{window.location.reload()}}>\r\n                        Start Again\r\n                    </Button>\r\n                </Paper>\r\n            </> : <>\r\n                    <ProgressBar striped variant=\"warning\" now={selectedQuestion && (currentIndex + 1) / allData.length * 100} />\r\n                    {selectedQuestion && <Paper elevation={3} className={'quizArea'}>\r\n                        <div>\r\n                            <h2>\r\n                                Question {currentIndex !== null && currentIndex + 1} of {allData.length}\r\n                            </h2>\r\n                            <h6>Category : {decodeURIComponent(selectedQuestion.category)}</h6>\r\n                            <Rating name=\"read-only\" size=\"small\" value={selectedQuestion.rating} readOnly />\r\n                        </div>\r\n                        <Divider style={{marginBottom:'20px'}} />\r\n                        <div>\r\n                            <p>\r\n                                {decodeURIComponent(selectedQuestion.question)}\r\n                            </p>\r\n\r\n                        </div>\r\n                        <div>\r\n                            <div className={'optionsContainer'}>\r\n                                {selectedQuestion && selectedQuestion.options.map((v, i) => {\r\n                                    return <Chip\r\n                                        label={v}\r\n                                        onClick={() => { handleOptionClick(v) }}\r\n\r\n                                        variant=\"outlined\"\r\n                                    />\r\n                                })}\r\n                            </div>\r\n\r\n\r\n                            {answered && <div className={'alert'}>\r\n                                <Alert severity={rightAnswered ? 'success' : \"error\"}>{rightAnswered ? 'Correct Answer, Well Done' : \"Sorry, Wrong Answer\"}</Alert>\r\n                            </div>}\r\n\r\n                            <div>\r\n                                <Button\r\n                                    variant=\"contained\"\r\n                                    color=\"secondary\"\r\n                                    fullWidth\r\n                                    disabled={answered ? false : true}\r\n                                    endIcon={<ArrowRightAlt />}\r\n                                    onClick={() => { handleNext() }}\r\n                                >\r\n                                    Next\r\n                        </Button>\r\n                            </div>\r\n\r\n                        </div>\r\n\r\n\r\n                    </Paper>}\r\n\r\n                    <div>\r\n                        <div className={'scoreBarTxts'}>\r\n                            <p>Score : {isNaN(Math.round(totalCorrectAnswered / totalAnswered * 100)) ? 0 : Math.round(totalCorrectAnswered / totalAnswered * 100)}%</p>\r\n                            <p>Max Score : {Math.round((totalCorrectAnswered + (allData.length - totalAnswered)) / allData.length * 100)}</p>\r\n\r\n                        </div>\r\n                        <ProgressBar>\r\n                            <ProgressBar striped variant=\"warning\" now={Math.round(totalCorrectAnswered / allData.length * 100)} key={1} />\r\n                            <ProgressBar variant=\"success\" now={Math.round(totalCorrectAnswered / totalAnswered * 100)} key={2} />\r\n                            <ProgressBar striped variant=\"danger\" now={Math.round((totalCorrectAnswered + (allData.length - totalAnswered)) / allData.length * 100)} key={3} />\r\n                        </ProgressBar>\r\n                    </div>\r\n                </>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Quiz","import React from 'react';\nimport logo from './logo.svg';\nimport Quiz from './Components/Quiz/quiz'\nimport './App.css';\n\nfunction App() {\n  return (\n    <>\n      <Quiz />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}